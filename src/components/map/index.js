import React, { useRef, useEffect, useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';
import _ from 'lodash';
// import { invert } from '../../helpers';
import { Store } from '../../store';
// eslint-disable-next-line import/no-webpack-loader-syntax
import MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';

mapboxgl.workerClass = MapboxWorker;
mapboxgl.accessToken = 'pk.eyJ1IjoibmV4dmlldyIsImEiOiJja21sNW9vdjgwYmIwMnJwbG90d2tpZzloIn0.ZWrJVGUnjy-wbYo92RAVJw';

const useStyles = makeStyles((theme) => ({
    mapContainer: (props) => ({
        position: 'absolute',
        left: props.drawerOpen ? props.drawerWidth : 0,
        right: 0,
        top: 0,
        bottom: props.footerHeight,
        outline: 'none',
        '& canvas:focus': {
            outline: 'none'
        }
    })
}));

const Map = () => {
    const { state } = React.useContext(Store);
    const classes = useStyles({ ...state });
    const mapContainer = useRef();
    const [ lng, setLng ] = useState(-96.5634227);
    const [ lat, setLat ] = useState(39.218219);
    const [ zoom, setZoom ] = useState(4.5);

    useEffect(() => {
        const map = new mapboxgl.Map({
            container: mapContainer.current,
            style: state.lightTheme ? 'mapbox://styles/nexview/ckmmghn6810qu17made88fw4n' : 'mapbox://styles/nexview/ckmm245101xh117pjlj3swma9',
            hash: true,
            minZoom: 4.5,
            maxZoom: 11,
            center: [ lng, lat ],
            zoom: zoom
        });

        map.on('load', () => {
            console.log(map.getStyle().layers);
            map.addSource('kffc_20210326_040812', {
                type: 'vector',
                tiles: [
                    'http://localhost:3000/radar/KFFC/Newnan/Velocity/kffc_20210326_040812/{z}/{x}/{y}.pbf'
                ]
            });
            map.addLayer({
                id: 'kffc_20210326_040812',
                type: 'fill',
                source: 'kffc_20210326_040812',
                'source-layer': 'kffc_20210326_040812',
                paint: {
                    'fill-color': {
                        base: 1,
                        type: 'exponential',
                        property: 'value',
                        stops: [
                            [-999, "rgb(170, 0, 255)" ],
                            [ -123.5, "rgb(127, 0, 207)" ],
[ -123.4, "rgb(138, 3, 147)" ],
[ -123.4, "rgb(132, 4, 148)" ],
[ -114.7, "rgb(126, 4, 149)" ],
[ -108.8, "rgb(120, 4, 150)" ],
[ -102.9, "rgb(114, 4, 151)" ],
[ -99, "rgb(108, 4, 152)" ],
[ -98.1, "rgb(93, 5, 153)" ],
[ -97.1, "rgb(85, 5, 153)" ],
[ -96.2, "rgb(77, 4, 153)" ],
[ -95.2, "rgb(69, 4, 153)" ],
[ -94.3, "rgb(61, 3, 153)" ],
[ -93.3, "rgb(52, 3, 153)" ],
[ -92.4, "rgb(44, 3, 153)" ],
[ -91.4, "rgb(36, 2, 153)" ],
[ -90.5, "rgb(28, 2, 153)" ],
[ -89.5, "rgb(22, 2, 153)" ],
[ -88.6, "rgb(22, 12, 156)" ],
[ -87.6, "rgb(23, 23, 160)" ],
[ -86.7, "rgb(24, 34, 163)" ],
[ -85.7, "rgb(25, 44, 167)" ],
[ -84.8, "rgb(26, 55, 170)" ],
[ -83.8, "rgb(27, 66, 174)" ],
[ -82.9, "rgb(28, 76, 177)" ],
[ -81.9, "rgb(29, 87, 181)" ],
[ -81, "rgb(30, 98, 184)" ],
[ -80, "rgb(31, 108, 188)" ],
[ -79, "rgb(32, 119, 192)" ],
[ -78, "rgb(33, 130, 195)" ],
[ -77, "rgb(34, 140, 199)" ],
[ -76, "rgb(35, 151, 202)" ],
[ -75, "rgb(36, 162, 206)" ],
[ -74, "rgb(37, 172, 209)" ],
[ -73, "rgb(38, 183, 213)" ],
[ -72, "rgb(39, 194, 216)" ],
[ -71, "rgb(40, 204, 220)" ],
[ -70, "rgb(48, 224, 227)" ],
[ -69, "rgb(52, 224, 227)" ],
[ -68, "rgb(58, 224, 227)" ],
[ -67, "rgb(65, 225, 228)" ],
[ -66, "rgb(71, 226, 229)" ],
[ -65, "rgb(78, 226, 229)" ],
[ -64, "rgb(84, 227, 230)" ],
[ -63, "rgb(91, 228, 231)" ],
[ -62, "rgb(97, 229, 232)" ],
[ -61, "rgb(104, 229, 232)" ],
[ -60, "rgb(110, 230, 233)" ],
[ -59.1, "rgb(117, 231, 234)" ],
[ -58.1, "rgb(123, 231, 234)" ],
[ -57.2, "rgb(130, 232, 235)" ],
[ -56.2, "rgb(136, 233, 236)" ],
[ -55.3, "rgb(143, 234, 237)" ],
[ -54.4, "rgb(149, 234, 237)" ],
[ -53.4, "rgb(156, 235, 238)" ],
[ -52.5, "rgb(162, 236, 239)" ],
[ -51.6, "rgb(169, 236, 239)" ],
[ -50.6, "rgb(175, 237, 240)" ],
[ -49.7, "rgb(182, 238, 241)" ],
[ -48.8, "rgb(167, 241, 218)" ],
[ -47.8, "rgb(154, 242, 200)" ],
[ -46.9, "rgb(140, 243, 181)" ],
[ -45.9, "rgb(127, 245, 163)" ],
[ -45, "rgb(113, 246, 144)" ],
[ -44, "rgb(100, 247, 126)" ],
[ -43, "rgb(87, 248, 108)" ],
[ -42, "rgb(73, 250, 89)" ],
[ -41, "rgb(60, 251, 71)" ],
[ -40, "rgb(46, 252, 52)" ],
[ -39, "rgb(33, 253, 34)" ],
[ -38, "rgb(3, 250, 3)" ],
[ -37, "rgb(3, 245, 3)" ],
[ -36, "rgb(3, 240, 3)" ],
[ -35, "rgb(3, 234, 3)" ],
[ -34, "rgb(3, 229, 3)" ],
[ -33, "rgb(3, 224, 3)" ],
[ -32, "rgb(3, 219, 3)" ],
[ -31, "rgb(3, 213, 3)" ],
[ -30, "rgb(3, 208, 3)" ],
[ -29, "rgb(3, 203, 3)" ],
[ -28, "rgb(3, 198, 3)" ],
[ -27, "rgb(3, 192, 3)" ],
[ -26, "rgb(3, 187, 3)" ],
[ -25, "rgb(3, 182, 3)" ],
[ -24, "rgb(3, 177, 3)" ],
[ -23, "rgb(2, 171, 2)" ],
[ -22, "rgb(2, 166, 2)" ],
[ -21, "rgb(2, 161, 2)" ],
[ -20, "rgb(2, 156, 2)" ],
[ -19, "rgb(2, 150, 2)" ],
[ -18.1, "rgb(2, 140, 2)" ],
[ -18, "rgb(2, 145, 2)" ],
[ -17.1, "rgb(2, 135, 2)" ],
[ -16.2, "rgb(2, 129, 2)" ],
[ -15.2, "rgb(2, 124, 2)" ],
[ -14.3, "rgb(2, 119, 2)" ],
[ -13.3, "rgb(2, 114, 2)" ],
[ -12.4, "rgb(2, 108, 2)" ],
[ -11.4, "rgb(2, 103, 2)" ],
[ -10.5, "rgb(5, 102, 3)" ],
[ -9.5, "rgb(78, 121, 76)" ],
[ -8.6, "rgb(82, 122, 80)" ],
[ -7.6, "rgb(86, 124, 84)" ],
[ -6.7, "rgb(90, 125, 88)" ],
[ -5.7, "rgb(94, 126, 92)" ],
[ -4.8, "rgb(98, 128, 96)" ],
[ -3.8, "rgb(102, 129, 100)" ],
[ -2.9, "rgb(106, 130, 104)" ],
[ -1.9, "rgb(110, 132, 108)" ],
[ -1, "rgb(114, 133, 112)" ],
[ 0, "rgb(138, 118, 118)" ],
[ 1, "rgb(138, 114, 129)" ],
[ 1.9, "rgb(138, 108, 122)" ],
[ 2.9, "rgb(137, 102, 115)" ],
[ 3.8, "rgb(136, 95, 108)" ],
[ 4.8, "rgb(136, 89, 101)" ],
[ 5.7, "rgb(135, 82, 94)" ],
[ 6.7, "rgb(134, 76, 86)" ],
[ 7.6, "rgb(133, 69, 79)" ],
[ 8.6, "rgb(133, 63, 72)" ],
[ 9.5, "rgb(132, 56, 65)" ],
[ 10.5, "rgb(110, 0, 0)" ],
[ 11.4, "rgb(115, 0, 0)" ],
[ 12.4, "rgb(121, 0, 0)" ],
[ 13.3, "rgb(126, 0, 0)" ],
[ 14.3, "rgb(132, 0, 1)" ],
[ 15.2, "rgb(137, 0, 1)" ],
[ 16.1, "rgb(154, 0, 2)" ],
[ 16.2, "rgb(143, 0, 1)" ],
[ 17.1, "rgb(149, 0, 2)" ],
[ 18.1, "rgb(160, 0, 2)" ],
[ 19, "rgb(165, 0, 3)" ],
[ 20, "rgb(171, 0, 3)" ],
[ 21, "rgb(176, 0, 3)" ],
[ 22, "rgb(182, 0, 4)" ],
[ 23, "rgb(188, 0, 4)" ],
[ 24, "rgb(193, 0, 4)" ],
[ 25, "rgb(199, 0, 4)" ],
[ 26, "rgb(204, 0, 5)" ],
[ 27, "rgb(210, 0, 5)" ],
[ 28, "rgb(215, 0, 5)" ],
[ 29, "rgb(221, 0, 6)" ],
[ 30, "rgb(227, 0, 6)" ],
[ 31, "rgb(232, 0, 6)" ],
[ 32, "rgb(238, 0, 7)" ],
[ 33, "rgb(243, 0, 7)" ],
[ 34, "rgb(250, 55, 81)" ],
[ 35, "rgb(250, 60, 89)" ],
[ 36, "rgb(250, 65, 97)" ],
[ 37, "rgb(250, 71, 105)" ],
[ 38, "rgb(251, 76, 113)" ],
[ 39, "rgb(251, 82, 122)" ],
[ 40, "rgb(251, 87, 130)" ],
[ 41, "rgb(252, 93, 138)" ],
[ 42, "rgb(252, 98, 146)" ],
[ 43, "rgb(252, 104, 155)" ],
[ 44, "rgb(252, 109, 163)" ],
[ 45, "rgb(253, 115, 171)" ],
[ 45.9, "rgb(253, 120, 179)" ],
[ 46.9, "rgb(253, 126, 188)" ],
[ 47.8, "rgb(254, 131, 196)" ],
[ 48.8, "rgb(254, 137, 204)" ],
[ 49.7, "rgb(255, 140, 213)" ],
[ 50.6, "rgb(255, 149, 208)" ],
[ 51.6, "rgb(255, 159, 203)" ],
[ 52.5, "rgb(255, 168, 198)" ],
[ 53.4, "rgb(255, 178, 193)" ],
[ 54.4, "rgb(255, 187, 188)" ],
[ 55.3, "rgb(255, 197, 183)" ],
[ 56.2, "rgb(255, 206, 178)" ],
[ 57.2, "rgb(255, 216, 173)" ],
[ 58.1, "rgb(255, 225, 168)" ],
[ 59.1, "rgb(255, 232, 163)" ],
[ 60, "rgb(255, 228, 159)" ],
[ 61, "rgb(255, 224, 155)" ],
[ 62, "rgb(255, 219, 151)" ],
[ 63, "rgb(255, 215, 147)" ],
[ 64, "rgb(255, 211, 142)" ],
[ 65, "rgb(255, 206, 138)" ],
[ 66, "rgb(255, 202, 134)" ],
[ 67, "rgb(255, 197, 130)" ],
[ 68, "rgb(255, 193, 125)" ],
[ 69, "rgb(255, 189, 121)" ],
[ 70, "rgb(255, 184, 117)" ],
[ 71, "rgb(255, 180, 113)" ],
[ 72, "rgb(255, 176, 108)" ],
[ 73, "rgb(255, 171, 104)" ],
[ 74, "rgb(255, 167, 100)" ],
[ 75, "rgb(255, 162, 96)" ],
[ 76, "rgb(255, 158, 91)" ],
[ 77, "rgb(255, 154, 87)" ],
[ 78, "rgb(255, 149, 83)" ],
[ 79, "rgb(255, 138, 79)" ],
[ 80, "rgb(252, 135, 78)" ],
[ 81, "rgb(248, 132, 76)" ],
[ 81.9, "rgb(245, 129, 74)" ],
[ 82.9, "rgb(241, 126, 72)" ],
[ 83.8, "rgb(238, 123, 71)" ],
[ 84.8, "rgb(234, 120, 69)" ],
[ 85.7, "rgb(231, 117, 67)" ],
[ 86.7, "rgb(227, 114, 65)" ],
[ 87.6, "rgb(224, 111, 63)" ],
[ 88.6, "rgb(220, 108, 62)" ],
[ 89.5, "rgb(216, 104, 60)" ],
[ 90.5, "rgb(213, 101, 58)" ],
[ 91.4, "rgb(209, 98, 56)" ],
[ 92.4, "rgb(206, 95, 54)" ],
[ 93.3, "rgb(202, 92, 53)" ],
[ 94.3, "rgb(199, 89, 51)" ],
[ 95.2, "rgb(195, 86, 49)" ],
[ 96.2, "rgb(192, 83, 47)" ],
[ 97.1, "rgb(188, 80, 45)" ],
[ 98.1, "rgb(185, 77, 44)" ],
[ 99, "rgb(181, 74, 42)" ],
[ 100, "rgb(177, 70, 40)" ],
[ 103.9, "rgb(174, 67, 38)" ],
[ 109.8, "rgb(170, 64, 36)" ],
[ 116.6, "rgb(167, 61, 35)" ],
[ 122.5, "rgb(163, 58, 33)" ],
[999, "rgb(170, 0, 255)" ],
                        ]
                    }
                }
            }, 'water_borders');
        });
        
        map.on('move', () => {
            setLng(map.getCenter().lng.toFixed(4));
            setLat(map.getCenter().lat.toFixed(4));
            setZoom(map.getZoom().toFixed(2));
        });
        
        return () => map.remove();
    }, [state]);

    return (
        <div>
            <div className={ classes.mapContainer } ref={ mapContainer } />
        </div>
    );
};

export default Map;